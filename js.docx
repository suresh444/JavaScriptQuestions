1. What will be output of the following code.

    employeeID=12233
    function foo(){
      console.log(employeeID)
    }
    foo()   

  Ans: employeeID is not defined.
    
2.What will be the output of the following code.

  var employeeID=12233
  function foo(){
    var employeeID= 555
    console.log(employeeID)
  }
  foo()
  console.log(employeeID)
  
  Ans: 555,12233
  
3.What will be the output of the following code

  var employeeID=12233
  function foo(){
     employeeID= 555
    console.log(employeeID)
  }
  foo()
  console.log(employeeID)
  
  Ans. 555,555
  
 4.What will be the output of the following code
  
  function foo(){
    console.log(employeeId);
    var employeeId = '19000';
  }
  foo()
  
  Ans: undefined
  
5. What will be the output of the following code
  
  function foo() {
    var employeeName = 'TATA';
    return function(){
      console.log(employeeName);
    }
  }
  let val = new foo();
  val()
  
  Ans. TATA
  
6. What will be the output of the following code
  
  a=[1,2,3]
  b=[1,2,3]
  console.log(a==b)
  //same for object also

  Ans. false
  
7. What will be the output of the following code  

  let a=[1,2,3]
  let b=a
  console.log(a===b)

  Ans. true

8. What will be the output of the following code
    
  let a=[1,2,3]
  let b=a
  b.push(4)
  console.log(a)
  console.log(b)
  
  Ans. [1,2,3,4]
       [1,2,3,4]
       
9. What will be the output of the following code
  let a=[1,2,3]
  let b=[...a]
  a.push(4)
  console.log(a)
  console.log(b)
  
  Ans. [1,2,3,4]
       [1,2,3]
   
   
10. What will be the output of the following code

    var employ = {
      name: 'TATA',
      empId: function () {
        var self = this;
        (function () {
          console.log(self.name);
        }());
      }
    };
    employ.empId()
   
   Ans. TATA
    
11. What will be the output of the following code
    
    console.log(employeeID)
    var employeeID=12233
    
    Ans: undefined  

12. What will be the output of the following code
    
    console.log(employeeID)
    let employeeID=12233
    
    Ans: Cannot access 'employeeID' before initialization

13. What will be the output of the following code
    function foo() {
      console.log(1)
      setTimeout(function(){console.log(2)},1000)
      setTimeout(function(){console.log(3)},0)
      console.log(4)
    }
    console.log(5)

    foo();
    
    Ans: 5,1,4,3,2

14. What will be the output of the following code
    
    function foo() {
      setTimeout(()=>{
        console.log(i)
      },1000)
      var i =1;
    }

    foo();
    
    Ans: 1
    
15. What will be the output of the following code
    
    console.log('start')
    setTimeout(() => {
      console.log('setTimeout')
    })
    Promise.resolve().then(() => {
      console.log('resolve')
    })
    console.log('end')
    
    Ans:  start, end, resolve, setTimeout
    
16. What will be the output of the following code
    
    const promise = new Promise((resolve, reject) => {
      console.log(1);
      setTimeout(() => {
        console.log("timerStart");
        resolve("success");
        console.log("timerEnd");
      }, 0);
      console.log(2);
    });
    promise.then((res) => {
      console.log(res);
    });
    console.log(4);
    
    Ans: 1,2,4,timerStart,timerEnd, success
    
17. What will be the output of the following code

    const timer1 = setTimeout(() => {
      console.log('timer1');
    const timer3 = setTimeout(() => { 
        console.log('timer3')
      }, 0)
    }, 0)
    const timer2 = setTimeout(() => {
      console.log('timer2')
    }, 0)
    console.log('start')
    
    Ans: start, timer1, timer2, timer3
    
18. What will be the output of the following code

    const timer1 = setTimeout(() => {
      console.log('timer1');
      const promise1 = Promise.resolve().then(() => {
        console.log('promise1')
      })
    }, 0)
    const timer2 = setTimeout(() => {
      console.log('timer2')
    }, 0)
    console.log('start')
    
    Ans: start, timer1, promise1, timer2
    
19. What will be the output of the following code

    const promise1 = Promise.resolve().then(() => {
      console.log('promise1');
      const timer2 = setTimeout(() => {
        console.log('timer2')
      }, 0)
    });
    const timer1 = setTimeout(() => {
      console.log('timer1')
      const promise2 = Promise.resolve().then(() => {
        console.log('promise2')
      })
    }, 0)
    console.log('start');
    
    Ans: start, promise1, timer1, promise2, timer2
    
    
  
  
  
  
  
  
  
