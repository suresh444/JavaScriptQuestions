1. What will be output of the following code.

    employeeID=12233
    function foo(){
      console.log(employeeID)
    }
    foo()   

  Ans: employeeID is not defined.
    
2.What will be the output of the following code.

  var employeeID=12233
  function foo(){
    var employeeID= 555
    console.log(employeeID)
  }
  foo()
  console.log(employeeID)
  
  Ans: 555,12233
  
3.What will be the output of the following code

  var employeeID=12233
  function foo(){
     employeeID= 555
    console.log(employeeID)
  }
  foo()
  console.log(employeeID)
  
  Ans. 555,555
  
 4.What will be the output of the following code
  
  function foo(){
    console.log(employeeId);
    var employeeId = '19000';
  }
  foo()
  
  Ans: undefined
  
5. What will be the output of the following code
  
  function foo() {
    var employeeName = 'TATA';
    return function(){
      console.log(employeeName);
    }
  }
  let val = new foo();
  val()
  
  Ans. TATA
  
6. What will be the output of the following code
  
  a=[1,2,3]
  b=[1,2,3]
  console.log(a==b)
  //same for object also

  Ans. false
  
7. What will be the output of the following code  

  let a=[1,2,3]
  let b=a
  console.log(a===b)

  Ans. true

8. What will be the output of the following code
    
  let a=[1,2,3]
  let b=a
  b.push(4)
  console.log(a)
  console.log(b)
  
  Ans. [1,2,3,4]
       [1,2,3,4]
       
9. What will be the output of the following code
  let a=[1,2,3]
  let b=[...a]
  a.push(4)
  console.log(a)
  console.log(b)
  
  Ans. [1,2,3,4]
       [1,2,3]
   
   
10. What will be the output of the following code

    var employ = {
      name: 'TATA',
      empId: function () {
        var self = this;
        (function () {
          console.log(self.name);
        }());
      }
    };
    employ.empId()
   
   Ans. TATA
    
11. What will be the output of the following code
    
    console.log(employeeID)
    var employeeID=12233
    
    Ans: undefined  

12. What will be the output of the following code
    
    console.log(employeeID)
    let employeeID=12233
    
    Ans: Cannot access 'employeeID' before initialization

13. What will be the output of the following code
    function foo() {
      console.log(1)
      setTimeout(function(){console.log(2)},1000)
      setTimeout(function(){console.log(3)},0)
      console.log(4)
    }
    console.log(5)

    foo();
    
    Ans: 5,1,4,3,2

14. What will be the output of the following code
    
    function foo() {
      setTimeout(()=>{
        console.log(i)
      },1000)
      var i =1;
    }

    foo();
    
    Ans: 1
    
15. What will be the output of the following code
    
    console.log('start')
    setTimeout(() => {
      console.log('setTimeout')
    })
    Promise.resolve().then(() => {
      console.log('resolve')
    })
    console.log('end')
    
    Ans:  start, end, resolve, setTimeout
    
16. What will be the output of the following code
    
    const promise = new Promise((resolve, reject) => {
      console.log(1);
      setTimeout(() => {
        console.log("timerStart");
        resolve("success");
        console.log("timerEnd");
      }, 0);
      console.log(2);
    });
    promise.then((res) => {
      console.log(res);
    });
    console.log(4);
    
    Ans: 1,2,4,timerStart,timerEnd, success
    
17. What will be the output of the following code

    const timer1 = setTimeout(() => {
      console.log('timer1');
    const timer3 = setTimeout(() => { 
        console.log('timer3')
      }, 0)
    }, 0)
    const timer2 = setTimeout(() => {
      console.log('timer2')
    }, 0)
    console.log('start')
    
    Ans: start, timer1, timer2, timer3
    
18. What will be the output of the following code

    const timer1 = setTimeout(() => {
      console.log('timer1');
      const promise1 = Promise.resolve().then(() => {
        console.log('promise1')
      })
    }, 0)
    const timer2 = setTimeout(() => {
      console.log('timer2')
    }, 0)
    console.log('start')
    
    Ans: start, timer1, promise1, timer2
    
19. What will be the output of the following code

    const promise1 = Promise.resolve().then(() => {
      console.log('promise1');
      const timer2 = setTimeout(() => {
        console.log('timer2')
      }, 0)
    });
    const timer1 = setTimeout(() => {
      console.log('timer1')
      const promise2 = Promise.resolve().then(() => {
        console.log('promise2')
      })
    }, 0)
    console.log('start');
    
    Ans: start, promise1, timer1, promise2, timer2
    
 20. Features of ES6
     
     1.Arrrow functions
     2.Let keyword
     3.for...of Loop
     4.Template Literals->  ${a}
     5.classes
     6.Destructuring
     7.Spread and Rest Operator
     8.const Keyword

21. What are Types in js?
    
    1.Boolean
    2.Number
    3.String
    4.Null
    5.undefined

22. What is hoisting
    
    JavaScript code runs in two steps(Memory allocation and Code Execution).
    In first step it allocates memory to all the variables and functions. In second phase it executes the code line by line(synchronously).
    As memory is allocated they are in a way declared(but not initialized).This phenomenon of allocating space to variables and functions before
    a single line of code is executed is known as hoisting. 
    It is similar to moving all the variable and function declarations at the top of the program.
    
   let and const are also hoisted in JS. Although accessing let and const type variables would give an error because they are in
   temporal dead zone(they are not in global space).
   
   Example: 
    console.log(a);
    var = 10;
    
    output: undefined
    
23. What is const? can we mutate array and object?
    
    const is block scope same  as let we can mutate const array and object 
    
    Example:
    const a=[1,2,3,4,5]
    a[0]=2
    console.log(a)

    output: [2,2,3,4,5]
    
24. what are rest and spread operators
    
    Rest syntax looks exactly like spread syntax. In a way, rest syntax is the opposite of spread syntax.
    Spread syntax "expands" an array into its elements, while rest syntax collects multiple elements and
    "condenses" them into a single element.

    Spread operator:                                    |   Rest Operator:
        Spreads the array or Obaject literal            |       For a function to pass n number of pramaters or rest of the paramters.
        Example:                                        |       Example: 
            var a =[1,2,3]                              |           sum(...a){console.log(a) }
            var b =[4,5,6]                              |            sum(1,2,3,4,5)   
            c=[...a,...b]                               |
                                                        |
           
           |
    
 25. What is call,bind,apply?
 
                                              |
    call: To say simply ,to access the values | bind: functionality is similar to call               | apply: it is same  as call if we want to pass an array instead
    outside of the  function.                 |  this can be used when we want to bind the           |  of passing one by one like call
                                              |  value and invoke the function later.                |                
     const emp = {                            |                                                      |  const emp ={name :'csk', age:38}  
      name: 'csk',                            |   const emp ={name :'csk', age:38}                   |  function a(msg1,msg2){ console.log(this.name, this.age,msg1,msg2 )}
      age: '38',                              |   function a(){ console.log(this.name, this.age);}   |   
    };                                        |   a.bind(emp)                                        |  const values = a.apply(emp, [1,2])
                                              |   a()                                                |  console.log(values)
    function a() {                            |                                                      |  
      console.log(this.name, this.age);       |   o/p: csk 38                                        |  o/p: csk,38,1,2
    }                                         |                                                      |
    a.call(emp);                              |                                                      |
                                              |
    o/p: csk 38
    
    
   26. What is prototype in js?
       
       Prototype is also an object , every object and method sin js will inherit the properties from prototype.
       
   27. closures?
   
        closures is feature in js where inner function has access to variables of outer function.
        
   28. Different ways of creating object in js?
        
        1) var a = new Object()
        2) var a = Object.create(null)
        3) var a = {name:"tata"}
        
   29. what is event loop?
        
        Event loop is something which moves tasks from call back queuw to call stack so that it gets executed.
        
   30. event propogation,delegation, capturing?
        
   31. what is callback function?
   32. differece between callback and promise?
   33. strict in js?
   34. what are promises?
   35. why js functions are called higher order functions?
   36. setinterval and settimeout?
   
   37. Write logic for sorting the array without sort mehtod
        
        var done = false;

        while (!done) {
          done = true;
          for (let i = 0; i < a.length; i++) {
            if (a[i] > a[i + 1]) {
              let temp = a[i];
              a[i] = a[i + 1];
              a[i + 1] = temp;
              done = false;
            }
          }
          console.log(a);
        }
    
   38. Write logic for finding the unique elements in array
    
        var arr=[1,1,2,2,2]
        
        const uniqueElements = arr.filter((el,index, arrayVal)=>{
              if(arrayVal.indexOf(el)===index) return el
        })    
        
        console.log(uniqueElements)
        
        o/p : [1,2]
        
    39. Write logic for finding the occurences of elements in  array    
        
        var arr=[1,1,2,2,2]
        var occurences={}
        
        for(let el of arr){
            if(occurences[el]) occurences[el] = count++
            else ocuurences[el] =1
        }
        
        console.log(el)
        
        o/p: {1:1,2:3}
        
    40. Write a logic for returning the elemnts in array that are not repeated
    
        var arr= [1,2,3,2,1,5,6]
        
        arr.filter((el)=>{
            const b = arr.filter((el1)=>{
            return (el1==el).length ===1
            })
        })
        
        console.log(...b)
    
      41. Write logic to find the second largest element in the array.
      42. Write logic for flattening the  [ [ [8, 9], [6, 7] ], [[1, 2], [3, 21] ], [[65, 93], [61, 79] ]]
      43. What is the output for the below code
            for(var i=0;i<10;i++){}; console.log(i);
            for(let i=0;i<10;i++){}; console.log(i);
            for(var i=0;i<10;i++){
            setTimeout(() => {
            console.log(i);
            }, 0);
            };
      44. What are polyfills?
      45. how does map() works?
      46. What is call back queue?
      47. What is async/await?
      48. How to handle error scenarios in promises and async/await?
      49. Write a function that works for sum(2)(3)(4)() and it can be sum()....()
            
            let sum =  function(a){
              return function(b){
                return b?sum(a+b):a 

              }
            }

          console.log(sum(1)(4)(5)(6)(6)())
      
      50. create a function that returns a object with key as note value and the value will be no of notes for particular note
             For example total amount is 48
             {
                 20: 2,
                 5: 1,
                 2: 1,
                 1: 1
             }
             available notes = 1,2,5,10,20,50,100,200,500,2000
      
      51. Where do we use closures ? Examples for usage of closures?
      52. Why js functions are called as first class functions?
      53. What are pure and impure functions?
      54. What are anonymous functions? 
      55. what is IIFE?
      56. given an array a=[1,2,3,4], Print the elements in array for every 2 seconds? 
      57. Print the longest sub string "abcabcbb"?
      

        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  
  
  
  
  
